{
  "openapi": "3.0.1",
  "info": {
    "title": "Fake JSON API",
    "version": "v1"
  },
  "paths": {
    "/admin/reload": {
      "post": {
        "tags": [
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/async/{collectionId}": {
      "post": {
        "tags": [
          "Async"
        ],
        "summary": "Add new item",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Item to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "New async operation started"
          }
        }
      }
    },
    "/async/{collectionId}/{id}": {
      "put": {
        "tags": [
          "Async"
        ],
        "summary": "Replace item from collection",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be replaced",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "requestBody": {
          "description": "Item's new content",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "New async operation started"
          }
        }
      },
      "patch": {
        "tags": [
          "Async"
        ],
        "summary": "Update item's content",
        "description": "Patch data contains fields to be updated.\r\n            \r\n    {\r\n       \"stringField\": \"some value\",\r\n       \"intField\": 22,\r\n       \"boolField\": true\r\n    }",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "requestBody": {
          "description": "Patch data",
          "content": {
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "New async operation started"
          },
          "415": {
            "description": "Unsupported content type"
          }
        }
      },
      "delete": {
        "tags": [
          "Async"
        ],
        "summary": "Remove item from collection",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be removed",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "New async operation started"
          }
        }
      }
    },
    "/async/queue/{queueId}": {
      "get": {
        "tags": [
          "Async"
        ],
        "summary": "Get the job status",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Job's queue Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job is not completed"
          },
          "303": {
            "description": "Job is completed"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Async"
        ],
        "summary": "Delete the job item from the queue",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Job's queue Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Item found and deleted"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "Dynamic"
        ],
        "summary": "List keys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Dynamic"
        ],
        "summary": "List keys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Replace database.json content",
        "requestBody": {
          "description": "New JSON content",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{collectionId}": {
      "get": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get items",
        "description": "Add filtering with query parameters. E.q. /api/users?age=22&amp;name=Phil (not possible with Swagger)\r\n            \r\nOptional parameter names skip/take and offset/limit and page/per_page:\r\n/api/users?skip=10&amp;take=20\r\n/api/users?offset=10&amp;limit=20\r\n/api/users?page=2&amp;per_page=20",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Items to skip (optional name offset)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Items to take (optional name limit)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection item array"
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "404": {
            "description": "Collection not found"
          }
        }
      },
      "head": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get items",
        "description": "Add filtering with query parameters. E.q. /api/users?age=22&amp;name=Phil (not possible with Swagger)\r\n            \r\nOptional parameter names skip/take and offset/limit and page/per_page:\r\n/api/users?skip=10&amp;take=20\r\n/api/users?offset=10&amp;limit=20\r\n/api/users?page=2&amp;per_page=20",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Items to skip (optional name offset)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Items to take (optional name limit)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection item array"
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "404": {
            "description": "Collection not found"
          }
        }
      },
      "post": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Add new item",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Item to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Item created"
          },
          "400": {
            "description": "Item is null"
          },
          "409": {
            "description": "Collection is an object"
          }
        }
      }
    },
    "/api/{collectionId}/{id}": {
      "get": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get single item",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item found"
          },
          "400": {
            "description": "Item is not collection"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "head": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get single item",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item found"
          },
          "400": {
            "description": "Item is not collection"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "put": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Replace item from collection",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be replaced",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "requestBody": {
          "description": "Item's new content",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Item found and replaced"
          },
          "400": {
            "description": "Replace data is null or item is not in a collection"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Update item's content",
        "description": "Patch data contains fields to be updated.\r\n            \r\n    {\r\n       \"stringField\": \"some value\",\r\n       \"intField\": 22,\r\n       \"boolField\": true\r\n    }",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "requestBody": {
          "description": "Patch data",
          "content": {
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Item found and updated"
          },
          "400": {
            "description": "Patch data is empty or item is not in a collection"
          },
          "404": {
            "description": "Item not found"
          },
          "415": {
            "description": "Unsupported content type"
          }
        }
      },
      "delete": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Remove item from collection",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the item to be removed",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Item found and removed"
          },
          "400": {
            "description": "Item is not in a collection"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/api/{collectionId}/{id}/{path}": {
      "get": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get nested item",
        "description": "Add full path separated with periods. E.q. /api/users/1/parents/0/work",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "Rest of the path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Nested item found"
          },
          "400": {
            "description": "Parent item not found or item not collection"
          },
          "404": {
            "description": "Nested item not found"
          }
        }
      },
      "head": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Get nested item",
        "description": "Add full path separated with periods. E.q. /api/users/1/parents/0/work",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "Rest of the path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Nested item found"
          },
          "400": {
            "description": "Parent item not found or item not collection"
          },
          "404": {
            "description": "Nested item not found"
          }
        }
      }
    },
    "/api/{objectId}": {
      "put": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Replace object",
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "Object id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object's new content",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/json+merge-patch": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Object found and replaced"
          },
          "400": {
            "description": "Replace data is null or item is in a collection"
          },
          "404": {
            "description": "Object not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Update single object's content",
        "description": "Patch data contains fields to be updated.\r\n            \r\n    {\r\n       \"stringField\": \"some value\",\r\n       \"intField\": 22,\r\n       \"boolField\": true\r\n    }",
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "Object id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Patch data",
          "content": {
            "application/json+merge-patch": {
              "schema": {
                "type": "string"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Object found and updated"
          },
          "400": {
            "description": "Patch data is empty"
          },
          "404": {
            "description": "Object not found"
          },
          "415": {
            "description": "Unsupported content type"
          }
        }
      },
      "delete": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Remove single object",
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "Single object id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Object found and removed"
          },
          "400": {
            "description": "Object is a collection"
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    }
  },
  "components": {}
}